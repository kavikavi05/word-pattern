bool wordPattern(char* pattern, char* s) {
    int patternLen = strlen(pattern); // Calculate the length of the pattern
    int sLen = strlen(s); // Calculate the length of the input string

    if (patternLen == 0 || sLen == 0)
        return false; // If either pattern or string is empty, return false

    char* hashMap[26]; // Initialize an array of pointers to characters (hash map) with 26 slots
    memset(hashMap, 0, sizeof(char*) * 26); // Initialize all hash map entries to NULL

    char* word; // Declare a variable to store the current word
    char* token = strtok(s, " "); // Tokenize the string using space as the delimiter
    int i = 0; // Initialize the position in the pattern

    while (token != NULL) { // Process each word in the string
        if (i >= patternLen) {
            return false; // More words than characters in the pattern, return false
        }
        word = token; // Store the current word

        int index = pattern[i] - 'a'; // Calculate the index corresponding to the current character
        if (hashMap[index] == NULL) {
            // Check if the word is already mapped to another pattern character
            for (int j = 0; j < 26; j++) {
                if (hashMap[j] != NULL && strcmp(hashMap[j], word) == 0) {
                    return false; // Conflict: word already mapped to another character
                }
            }
            hashMap[index] = word; // Assign the current word to the hash map entry
        } else {
            if (strcmp(hashMap[index], word) != 0) {
                return false; // Conflict: word does not match the stored value
            }
        }

        token = strtok(NULL, " "); // Get the next word
        i++; // Move to the next position in the pattern
    }

    return i == patternLen; // Return true if all words processed and pattern length matches
}
